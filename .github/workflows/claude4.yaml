name: Claude parallel + best pick

on:
  workflow_dispatch: {}

jobs:
  generate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        run_id:
          - 1
          - 2
          - 3
          - 4
    steps:
      - name: Ask Claude for menus
        id: ask
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt: |
            あなたは料理家です。夏向けで甘みが少なく、さっぱり食べられるカレーを1つ考えてください。
            出力は以下のJSONオブジェクトのみ（Markdownや前置き・コードフェンスは禁止）。日本語で記述：
            {
              "name": string,
              "method": string,
              "features": [string, ...],
              "ingredients": [string, ...],
              "spice_profile": {
                "sweetness": number,
                "acidity": number,
                "heat": number
              }
            }
            制約:
            - 砂糖/はちみつ/果物/ココナッツミルク等の甘味要素は避けるか最小限。
            - 必ずJSONのみ返す（余計な文字やコードフェンスは禁止）。
          model: claude-3-7-sonnet-20250219
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      - name: Save reply from JSON log
        run: |
          jq --version >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y jq)
          TEXT=$(jq -r '[.. | objects | select(.result? or .message?) | (.result // (.message.content[0].text // empty))] | last // ""' "$RUNNER_TEMP/claude-execution-output.json")
          printf '%s\n' "$TEXT" | sed '/^```/d' > tmp.json
          jq -e . tmp.json > result-${{ matrix.run_id }}.json
          echo "Saved $(wc -c < result-${{ matrix.run_id }}.json) bytes to result-${{ matrix.run_id }}.json"
      - uses: actions/upload-artifact@v4
        with:
          name: results-${{ matrix.run_id }}
          path: result-${{ matrix.run_id }}.json

  pick-best:
    needs: generate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: results-*
          merge-multiple: true
          path: menus
      - name: Build combined prompt file
        run: |
          jq -s 'flatten' menus/*.json > combined.json
          {
            echo "次のJSON配列は4つのカレーレシピ候補です（同一スキーマ）。最も甘みが少ない（spice_profile.sweetness 最小。同点は acidity 高い方を優先）ものを1つ選び、以下のJSONのみ返してください（説明文やMarkdownは禁止）。";
            echo;
            echo "出力スキーマ例（説明目的。実際は有効なJSONオブジェクトのみ返す）: {\"selected_name\": string, \"reason\": string, \"selected\": object}";
            echo;
            echo "JSON配列:";
            cat combined.json;
          } > prompt.txt
          echo "----- prompt.txt preview -----"
          sed -n '1,200p' prompt.txt
      - name: Let Claude choose least-sweet
        id: choose
        uses: anthropics/claude-code-base-action@beta
        with:
          prompt_file: prompt.txt
          model: claude-3-7-sonnet-20250219
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
      - name: Save chosen JSON from log
        run: |
          jq --version >/dev/null 2>&1 || (sudo apt-get update && sudo apt-get install -y jq)
          # Extract latest textual result from the action's execution log
          jq -r '[.. | objects | select(.result? or .message?) | (.result // (.message.content[0].text // empty))] | last // ""' "$RUNNER_TEMP/claude-execution-output.json" > best_raw.txt
          # Strip code fences if any
          sed -i '/^```/d' best_raw.txt
          # If it's valid JSON already, keep as-is; otherwise try to pull first JSON object from the text
          if jq -e . best_raw.txt >/dev/null 2>&1; then
            cp best_raw.txt best.json
          else
            python3 - <<'PY'
import re, sys
src = 'best_raw.txt'
out = 'best.json'
text = open(src, 'r', encoding='utf-8').read()
m = re.search(r'\{[\s\S]*\}', text)
open(out, 'w', encoding='utf-8').write((m.group(0) if m else text).strip())
PY
            if ! jq -e . best.json >/dev/null 2>&1; then
              echo "Warning: chosen output is not valid JSON"
            fi
          fi
          echo "----- best.json preview -----"
          sed -n '1,120p' best.json || true
      - uses: actions/upload-artifact@v4
        with:
          name: best-selection
          path: best.json